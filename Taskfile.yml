version: '3'

vars:
  # GENERAL
  GOBIN: ./bin

tasks:
  build:
    cmds:
      - go build -o bin/protosync main.go

  release:
    cmds:
      - goreleaser release --snapshot --clean

  run:
    cmds:
      - go run ./cmd/.

  mock:
    cmds:
      - echo "mocking!"

  format:
    cmds:
      - task: go_files
        vars: { COMMAND: 'gofmt -w  {} +'}
      - task: go_files
        vars: { COMMAND: '{{.GOBIN}}/goimports -w  {} +'}

  test:
    cmds:
      - go test -v -race -cover ./...

  lint:
    cmds:
      - "{{.GOBIN}}/revive
        -config revive.toml
        -formatter friendly
        -exclude ./mock
        ./..."

  deps:
    cmds:
      - |
        export GOBIN="$(pwd)/bin"

        # GRPC

        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.16.0
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.16.0
        go install github.com/planetscale/vtprotobuf/cmd/protoc-gen-go-vtproto@v0.6.0
        go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.1
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0
        go install github.com/bufbuild/buf/cmd/buf@v1.31.0

        # OTHERS

        go install golang.org/x/tools/cmd/goimports@v0.19.0
        go install github.com/mgechev/revive@v1.3.7

        # Uncomment to use pre-commit hooks (pip must be installed)
        # pip install pre-commit

## INTERNAL COMMANDS

  go_files:
    desc: "Return all .go files and run .COMMAND on them"
    internal: true
    cmds:
     - find .
        -name "*.go"
        -not -path ./mock
        -exec {{.COMMAND}};
